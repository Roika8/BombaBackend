// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(MainDataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("DATA.CashData", b =>
                {
                    b.Property<int>("CashDataID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("Cash")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Invested")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CashDataID");

                    b.HasIndex("UserID");

                    b.ToTable("CashDatas");
                });

            modelBuilder.Entity("DATA.HistoryInstument", b =>
                {
                    b.Property<int>("InstrumentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsFromMainPortfolio")
                        .HasColumnType("bit");

                    b.Property<decimal>("MarketValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("PortfolioID")
                        .HasColumnType("int");

                    b.Property<decimal>("ProfitLose")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Units")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("InstrumentID");

                    b.HasIndex("PortfolioID");

                    b.ToTable("HistoryInstuments");
                });

            modelBuilder.Entity("DATA.HistoryPortfolio", b =>
                {
                    b.Property<int>("PortfolioID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PortfolioID");

                    b.HasIndex("UserID");

                    b.ToTable("HistoryPortfolios");
                });

            modelBuilder.Entity("DATA.Portfolio", b =>
                {
                    b.Property<int>("PortfolioID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PortfolioID");

                    b.ToTable("Portfolios");
                });

            modelBuilder.Entity("DATA.PortfolioInstrument", b =>
                {
                    b.Property<int>("InstrumentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("AvgPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ChartPattern")
                        .HasColumnType("int");

                    b.Property<int?>("PortfolioID")
                        .HasColumnType("int");

                    b.Property<decimal?>("StopLoss")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TakeProfit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Units")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("InstrumentID");

                    b.HasIndex("PortfolioID");

                    b.ToTable("PortfolioInstruments");
                });

            modelBuilder.Entity("DATA.TrackingInstrument", b =>
                {
                    b.Property<int>("InstrumentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("PortfolioID")
                        .HasColumnType("int");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InstrumentID");

                    b.HasIndex("PortfolioID");

                    b.ToTable("TrackingInstruments");
                });

            modelBuilder.Entity("DATA.TrackingInstumentPrice", b =>
                {
                    b.Property<int>("InstrumentTrackingPriceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TrackingInstrumentInstrumentID")
                        .HasColumnType("int");

                    b.HasKey("InstrumentTrackingPriceID");

                    b.HasIndex("TrackingInstrumentInstrumentID");

                    b.ToTable("TrackingInstumentsPrice");
                });

            modelBuilder.Entity("DATA.TrackingPortfolio", b =>
                {
                    b.Property<int>("PortfolioID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PortfolioID");

                    b.HasIndex("UserID");

                    b.ToTable("TrackingPortfolios");
                });

            modelBuilder.Entity("DATA.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("DATA.CashData", b =>
                {
                    b.HasOne("DATA.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DATA.HistoryInstument", b =>
                {
                    b.HasOne("DATA.HistoryPortfolio", "Portfolio")
                        .WithMany("Instruments")
                        .HasForeignKey("PortfolioID");

                    b.Navigation("Portfolio");
                });

            modelBuilder.Entity("DATA.HistoryPortfolio", b =>
                {
                    b.HasOne("DATA.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DATA.PortfolioInstrument", b =>
                {
                    b.HasOne("DATA.Portfolio", "Portfolio")
                        .WithMany("Instruments")
                        .HasForeignKey("PortfolioID");

                    b.Navigation("Portfolio");
                });

            modelBuilder.Entity("DATA.TrackingInstrument", b =>
                {
                    b.HasOne("DATA.TrackingPortfolio", "Portfolio")
                        .WithMany("Instruments")
                        .HasForeignKey("PortfolioID");

                    b.Navigation("Portfolio");
                });

            modelBuilder.Entity("DATA.TrackingInstumentPrice", b =>
                {
                    b.HasOne("DATA.TrackingInstrument", null)
                        .WithMany("TrackingPrices")
                        .HasForeignKey("TrackingInstrumentInstrumentID");
                });

            modelBuilder.Entity("DATA.TrackingPortfolio", b =>
                {
                    b.HasOne("DATA.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DATA.HistoryPortfolio", b =>
                {
                    b.Navigation("Instruments");
                });

            modelBuilder.Entity("DATA.Portfolio", b =>
                {
                    b.Navigation("Instruments");
                });

            modelBuilder.Entity("DATA.TrackingInstrument", b =>
                {
                    b.Navigation("TrackingPrices");
                });

            modelBuilder.Entity("DATA.TrackingPortfolio", b =>
                {
                    b.Navigation("Instruments");
                });
#pragma warning restore 612, 618
        }
    }
}
